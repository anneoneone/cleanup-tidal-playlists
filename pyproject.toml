[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "tidal-cleanup"
version = "2.0.0"
description = "A modern tool for synchronizing Tidal playlists with local audio files"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Anton", email = "anton@example.com"},
]
maintainers = [
    {name = "Anton", email = "anton@example.com"},
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Multimedia :: Sound/Audio",
    "Topic :: Utilities",
    "Typing :: Typed",
]
keywords = ["tidal", "music", "playlist", "audio", "rekordbox", "dj"]
requires-python = ">=3.9"
dependencies = [
    "tidalapi>=0.7.0",
    "pydantic>=2.0.0",
    "click>=8.0.0",
    "rich>=12.0.0",
    "thefuzz>=0.19.0",
    "mutagen>=1.45.0",
    "ffmpeg-python>=0.2.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "flake8-docstrings>=1.7.0",
    "flake8-bugbear>=23.0.0",
    "flake8-comprehensions>=3.10.0",
    "flake8-simplify>=0.19.0",
    "mypy>=1.0.0",
    "bandit>=1.7.0",
    "safety>=2.3.0",
    "pre-commit>=3.0.0",
    "tox>=4.0.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
]
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "myst-parser>=0.18.0",
]

[project.urls]
Homepage = "https://github.com/anneoneone/cleanup-tidal-playlists"
Repository = "https://github.com/anneoneone/cleanup-tidal-playlists"
Documentation = "https://github.com/anneoneone/cleanup-tidal-playlists#readme"
Issues = "https://github.com/anneoneone/cleanup-tidal-playlists/issues"

[project.scripts]
tidal-cleanup = "tidal_cleanup.cli.main:cli"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
tidal_cleanup = ["py.typed"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["tidal_cleanup"]
known_third_party = ["tidalapi", "pydantic", "click", "rich", "thefuzz", "mutagen"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

# MyPy configuration
[tool.mypy]
python_version = "3.9"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
explicit_package_bases = true

[[tool.mypy.overrides]]
module = [
    "tidalapi.*",
    "mutagen.*",
    "ffmpeg.*",
    "thefuzz.*",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = ["tests.*"]
ignore_errors = true
disallow_untyped_calls = false
disallow_untyped_defs = false

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src/tidal_cleanup",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=25",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# Coverage configuration
[tool.coverage.run]
source = ["src/tidal_cleanup"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "@abstractmethod",
]

# Bandit security linting
[tool.bandit]
exclude_dirs = ["tests", "test_*"]
skips = ["B101"]  # Skip assert_used test

# Flake8 configuration (in setup.cfg since flake8 doesn't support pyproject.toml yet)
